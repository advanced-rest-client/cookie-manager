/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   cookie-manager.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-icon/iron-icon.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-menu-button/paper-menu-button.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-dialog/paper-dialog.d.ts" />
/// <reference path="../tutorial-toast/tutorial-toast.d.ts" />
/// <reference path="../bottom-sheet/bottom-sheet.d.ts" />
/// <reference path="../cookies-list-items/cookies-list-items.d.ts" />
/// <reference path="../cookie-editor/cookie-editor.d.ts" />
/// <reference path="../cookie-details/cookie-details.d.ts" />
/// <reference path="../paper-fab/paper-fab.d.ts" />

declare namespace UiElements {

  /**
   * A manager for session cookies.
   * Renders list of cookies that can be edited.
   *
   * The element queries the application for cookies to display by sending
   * `session-cookie-list-all` custom event. The handler should set a `result` property
   * on the details object and cancel the event.
   * Result is a promise that resolves to cookies array.
   *
   * ### Example
   *
   * ```html
   * <cookie-manager on-session-cookie-list-all></cookie-manager>
   * ```
   *
   * ```javascript
   * window.addEventListener('session-cookie-list-all', (e) => {
   *  e.preventDefault();
   *  e.detail.result = Promise.resolve(cookies);
   * });
   * ```
   *
   * The element listens to `session-cookie-removed` and `session-cookie-changed`
   * events to update, add or delete a cookie from the list.
   * The `detail` object of this events is a cookie.
   *
   * ### Styling
   *
   * `<cookie-manager>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--cookie-manager` | Mixin applied to the element | `{}`
   * `--cookie-manager-loader` | Mixin applied to the `paper-progress` element | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   * `--empty-info` | Mixin applied to the label rendered when no data is available. | `{}`
   * `--cookie-manager-bottom-sheet` | Mixin applied to the bottom sheet tutorial element | `{}`
   * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   * `--bottom-sheet-width` | Width of the `<bottom-sheet>` element | `100%`
   * `--bottom-sheet-max-width` | Max width of the `<bottom-sheet>` element | `700px`
   * `--cookie-manager-bottom-sheet-right` | Right position of the `<bottom-sheet>` element | `40px`
   * `--cookie-manager-bottom-sheet-left` | Left position of the `<bottom-sheet>` element | `auto`
   */
  class CookieManager extends Polymer.Element {

    /**
     * List of cookies to display
     */
    items: any[]|null|undefined;

    /**
     * Computed value, true if `items` is set.
     */
    readonly hasItems: boolean|null|undefined;

    /**
     * True when loading data from the datastore.
     */
    readonly loading: boolean|null|undefined;

    /**
     * Current search query.
     */
    isSearch: boolean|null|undefined;

    /**
     * Computed value, `true` when the lists is hidden.
     */
    readonly listHidden: boolean|null|undefined;

    /**
     * Computed value. True when the query has been performed and no items
     * has been returned. It is different from `listHidden` where less
     * conditions has to be checked. It is set to true when it doesn't
     * have items, is not loading and is search.
     */
    readonly searchListEmpty: boolean|null|undefined;

    /**
     * A computed flag that determines that the query to the databastore
     * has been performed and empty result was returned.
     * This can be true only if not in search.
     */
    readonly dataUnavailable: boolean|null|undefined;
    _tutorialAllowed: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    reset(): void;

    /**
     * Queries application for list of cookies.
     * It dispatches `session-cookie-list-all` cuystom event.
     *
     * @returns Resolved when cookies are available.
     */
    queryCookies(): Promise<any>|null;

    /**
     * Processes incomming and sets cookies.
     */
    _processCookies(cookies: Array<object|null>|null): void;

    /**
     * Computes value for `hasItems` property
     *
     * @param size Size of the `items` array
     */
    _computeHasItems(size: Number|null): Boolean|null;

    /**
     * Resets the state after finishing search. It restors previous items
     * without changing query options.
     */
    _resetSearch(): void;

    /**
     * Computes value of the `listHidden` property.
     * List is hidden when no items are found and it is not searching.
     */
    _computeListHidden(hasItems: Boolean|null, isSearch: Boolean|null): Boolean|null;

    /**
     * Computes value for the `searchListEmpty` property
     */
    _computeSearchListEmpty(hasItems: any, loading: any, isSearch: any): any;

    /**
     * Computes value for the `dataUnavailable` proeprty
     */
    _computeDataUnavailable(hasItems: any, loading: any, isSearch: any): any;

    /**
     * Handles items delete event.
     */
    _onDelete(e: any): any;

    /**
     * Performs a delete action of cookie items.
     *
     * @param deleted List of deleted items.
     */
    _delete(deleted: Array<object|null>|null): Promise<any>|null;

    /**
     * Handles export event from the list.
     */
    _onExport(e: CustomEvent|null): void;

    /**
     * Menu item handler to export all data to file
     */
    _exportAllFile(): void;

    /**
     * Menu item handler to export all data to file
     */
    _exportAllDrive(): void;

    /**
     * Dispatches `export-data` custom event
     *
     * @param items List of request to export with the project.
     * @param destination Export destination.
     */
    _exportItems(items: any[]|null, destination: String|null): void;

    /**
     * Handler for the `list-items-search` event fired by the list view
     * Sets `isSearch` property and calls `query()` function to perform the
     * query.
     */
    _onSearch(e: CustomEvent|null): void;

    /**
     * Performs a query on a list.
     *
     * @param query The query to performs. Pass empty string
     * (or nothing) to reset the query.
     */
    query(query: String|null): void;
    _clearMenuOptions(): void;

    /**
     * Handler for delete all menu option click
     */
    _deleteAllClick(): void;

    /**
     * Called when delete datastore dialog is closed.
     */
    _onClearDialogResult(e: any): void;

    /**
     * Compares two cookies.
     * Cookies are the same if `domain`, `path` and `name` matches.
     *
     * @param a A cookie to compare
     * @param b Other cookie to compare
     * @returns True if the two cookies are the same.
     */
    _compareCookies(a: object|null, b: any): Boolean|null;

    /**
     * Returns cookie index on the `items` list.
     *
     * @param cookie A cookie object as in Electron API.
     * @returns Cookie index on the list or `-1` if not found.
     */
    _getCookieIndex(cookie: object|null): Number|null;

    /**
     * Clears a cookie from the list if matching cookie is n the list.
     */
    _onCookieRemoved(e: any): void;

    /**
     * Updates the cookie on the list or adds new one.
     */
    _onCookieChanged(e: any): void;

    /**
     * Opens details panel for the cookie
     */
    _onDetails(e: CustomEvent|null): void;

    /**
     * Deletes a request from the details panel.
     */
    _deleteDetails(): Promise<any>|null;

    /**
     * Opens request details editor in place of the request details applet.
     */
    _editDetails(): void;

    /**
     * Forces bottom sheet content to resize
     */
    _resizeSheetContent(): void;

    /**
     * Forces bottom sheet content to resize
     */
    _resizeEditorSheetContent(): void;

    /**
     * Handles cookie edit cancel event
     */
    _cancelEdit(): void;

    /**
     * Opens an empty cookie editor.
     */
    addCookie(): void;

    /**
     * Saves cookie editts be sending `session-cookie-update` event
     */
    _saveEdit(e: CustomEvent|null): Promise<any>|null;
  }
}

interface HTMLElementTagNameMap {
  "cookie-manager": UiElements.CookieManager;
}
